using System;
using System.Collections.Generic;
using System.Numerics;
using System.Text;

namespace SharedLib.Algs
{
    public static class PrimeFunctions
    {
        public static BigInteger[] MiddlePrimeGroups = new BigInteger[]
        {
            5915587277
            ,1500450271
            ,3267000013
            ,5754853343
            ,4093082899
            ,9576890767
            ,3628273133
            ,2860486313
            ,5463458053
            ,3367900313

            ,BigInteger.Parse("48112959837082048697")
            ,BigInteger.Parse("54673257461630679457")
            ,BigInteger.Parse("29497513910652490397")
            ,BigInteger.Parse("40206835204840513073")
            ,BigInteger.Parse("12764787846358441471")
            ,BigInteger.Parse("71755440315342536873")
            ,BigInteger.Parse("45095080578985454453")
            ,BigInteger.Parse("27542476619900900873")
            ,BigInteger.Parse("66405897020462343733")
            ,BigInteger.Parse("36413321723440003717")
        };

        public static BigInteger[] BigPrimeGroups = new BigInteger[]
        {
             BigInteger.Parse("671998030559713968361666935769")
            ,BigInteger.Parse("282174488599599500573849980909")
            ,BigInteger.Parse("521419622856657689423872613771")
            ,BigInteger.Parse("362736035870515331128527330659")
            ,BigInteger.Parse("115756986668303657898962467957")
            ,BigInteger.Parse("590872612825179551336102196593")
            ,BigInteger.Parse("564819669946735512444543556507")
            ,BigInteger.Parse("513821217024129243948411056803")
            ,BigInteger.Parse("416064700201658306196320137931")
            ,BigInteger.Parse("280829369862134719390036617067")

            ,BigInteger.Parse("22953686867719691230002707821868552601124472329079")
            ,BigInteger.Parse("30762542250301270692051460539586166927291732754961")
            ,BigInteger.Parse("29927402397991286489627837734179186385188296382227")
            ,BigInteger.Parse("46484729803540183101830167875623788794533441216779")
            ,BigInteger.Parse("95647806479275528135733781266203904794419563064407")
            ,BigInteger.Parse("64495327731887693539738558691066839103388567300449")
            ,BigInteger.Parse("58645563317564309847334478714939069495243200674793")
            ,BigInteger.Parse("48705091355238882778842909230056712140813460157899")
            ,BigInteger.Parse("15452417011775787851951047309563159388840946309807")
            ,BigInteger.Parse("53542885039615245271174355315623704334284773568199")

            ,BigInteger.Parse("56125680981752282333498088313568935051383833838594899821664631784577337171193624243181360054669678410455329112434552942717084003541384594864129940145043086760031292483340068923506115878221189886491132772739661669044958531131327771")
            ,BigInteger.Parse("33842087669314085922445541670258366617963547269871349157946397930021671072879057431968999155130964158826252278466715358308195987993086827188136033796484578574813585076823309337138021706520388123218024081641988010732647464860014933")
            ,BigInteger.Parse("63556399829835331952308746203320003046976892440596186268797010059920148204359911235920191263570262537797901436399163646602402069151710265676725083444680749168670016260057105903268204928263311884485983112346974646808220605856122413")
            ,BigInteger.Parse("25695117296461763226637390094361392410202888681972246015015616482456043135447255450090212538767136747061585519461591391690149785714912356898143322454744250574838470773113949042293937342467267728574177078625870667055683429587312037")
            ,BigInteger.Parse("21300201301629210452464119866388466834939209799796743744566215971019835934873713391025654608111703142839573952969146866196732314492859634538441409805139418615474981665588472532863079300348061212642715504474934450531890795747236331")
            ,BigInteger.Parse("38106758454920325419374791962420148010976790968384800173320135432994217408267883195973671635960451900291282983416672935366147588786416132622989521624086020960433610594480676881787661271594802197027745283959189724700467283256270403")
            ,BigInteger.Parse("38762217770011076543812558980103749234859497948714246622214162442205108754782773687842018087751465069758232680421784403844939497206445510513337080943785005155511815286799602210383243566108920435480682463875028936997633500773799647")
            ,BigInteger.Parse("32851821388794275994374291907684577477463192247701558137921750178596964806832152539714454184965573001529008083327769925416551124546909243647269222222136385653063227919905671969414694790703312697022313407087334414566987461854976977")
            ,BigInteger.Parse("12245442024374614689109712434724272673056459509314527349744503469345912205668622170940248748257546033159240098557771252551702406748969563113679865954698092482472205671770925537241038679473374235787361928891214113717891603697678797")
            ,BigInteger.Parse("41271733872267210121406786533931335908455178246240542085786249499513164373669477767257948610786612671289014957567551948850259753354379406851656244131227129708940056151731196095637855886900873713163739636895881967604705732739957041")

            ,BigInteger.Parse("433019240910377478217373572959560109819648647016096560523769010881172869083338285573756574557395862965095016483867813043663981946477698466501451832407592327356331263124555137732393938242285782144928753919588632679050799198937132922145084847")
            ,BigInteger.Parse("658385546911733550164516088405238961461880256029834598831972039469421755117818013653494814438931957316403111689187691446941406788869098983929874080332195117465344344350008880118042764943201875870917468833709791733282363323948005998269792207")
            ,BigInteger.Parse("631046060248729925310901897162524558757892947253360091376493465548881759500732321207310947252399572359255165803474695943110038180074419352488278424474341618599415520941229312656103885325688462411331647506617258539237678517515062029025882111")
            ,BigInteger.Parse("555930342800203269560493281582724297007323229545269515565579012169094819070209451773591842396562519380252706684512344033938908252241551898231885004212131994719956573451578988526291395886831310960617565446260750458144570897474910045788793641")
            ,BigInteger.Parse("963776490226810914179127416979112736599358462343660979133704637052985987395814985567964199253678349130533981848158045863245610061240372125223976414165504075241141636320276071785214612776961231843830877454050632964032066734998244033965101749")
            ,BigInteger.Parse("429658446338661686643493725510284110493599954226035820905785008443520381887917251101430906695273248229134343944968312754799687049087615143654956740908022486161773863760198918360760883640680471523406895493680359160538947211150254456062366151")
            ,BigInteger.Parse("301324137960315899820561048027348288330924961520646503519420540662482543144522433427373448331312307307161129547766561547892901485771895123906175962279608465429343603026135570815033813352165031141081975607881913019142452193449753529463010159")
            ,BigInteger.Parse("255112508897622985310494621898578485506502699374200456279537176322071752799387264311493082040326094068304025184818529912661589221508006459487667465358421280596050439152052898117848487594823639685476220238281599236511128329403379244547324431")
            ,BigInteger.Parse("120815570979701484704906977000760567182871429114712069861589084706550626575967516787438008593490722779337547394120718248995900363209947025063336882559539208430319216688889117222633155838468458047056355241515415159736436403445579777425189969")
            ,BigInteger.Parse("534263928796435965077261829036391545522904094953733451822909917110878745956911600280615705620571022574135290807990802800328210111615334824471145499122558846672862519090799997166472785212158821126257417115144412745386412468419250633060307007")
        };

        public static bool CheckRelativelyPrime(BigInteger num1, BigInteger num2)
        {
            if (num1 < num2)
            {
                var tmp = num1;
                num1 = num2;
                num2 = tmp;
            }
            if (num2 == 1) return true;
            if (num1 % num2 == 0) return false;
            else
            {
                return CheckRelativelyPrime(num2, num1 % num2);
            }
        }
    }
}
